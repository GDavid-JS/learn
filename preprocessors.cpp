#define TRUE 1
#define max(a, b) (a + b)
// #Define создает макрос, который представляет собой ассоциацию идентификатора или параметризованного идентификатора со строкой токена. После определения макроса компилятор может подставить строку токена для каждого обнаруженного идентификатора в исходном файле.
#undef max
// Отменяет макрос

#ifdef max //имя_макроса если есть макрос то выполняется следующий код
// последовательность операторов
#endif


#if defined TRUE
#endif
// или
#ifdef TRUE
#endif
// Если имя_макроса определено, то выражение становится истинным. В противном случае оно ста­новится ложным.

#if ! defined DEBUG // если DEBUG не определен
// код
#endif



#include<iostream>
#include "learn.cpp"
// Если файл указан в <> - то поиск будет происходить в стандартных каталогах, предназначенных для хранения заголовочных файлов.
// Если файл указан в ""  - то поиск будет происходить в текущем каталоге
// Директива #include предлагает компилятору включить другой исходный файл, имя которого ука­зывается после директивы.

#if константное_выражение
последовательность операторов
#else
// последовательность операторов
#endif
// Если после #if константное выражение принимает истинное значение, то код между #if и #endif компилируется, в противном случае код пропускается. Директива #endif используется для обо­значения конца блока #if.


#if выражение
последовательность операторов
#elif выражение 1
последовательность операторов
#endif


// Директива #pragma предоставляюет компилятору различные инструкции
#pragma имя
// где имя — это имя директивы #pragma. Borland определяет 14 директив #pragma:
// argused
// anon_struct
// codeseg
// comment
// exit
// hdrfile
// hdrstop
// inline
// intrinsic
// message
// option
// saveregs
// startup
// warn


// #error сообщение_об_ошибке
// Директива #error указывает компилятору в случае ее обнаружения остановить компиляцию. Как правило, она используется для отладки.